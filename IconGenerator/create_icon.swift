import SwiftUI; import AppKit; let canvasSize = CGSize(width: 1024, height: 1024); let symbolSize = canvasSize.width * 0.82; let config = NSImage.SymbolConfiguration(pointSize: symbolSize, weight: .regular); let ctx = CGContext(data: nil, width: Int(canvasSize.width), height: Int(canvasSize.height), bitsPerComponent: 8, bytesPerRow: 0, space: CGColorSpace(name: CGColorSpace.sRGB)!, bitmapInfo: CGImageAlphaInfo.premultipliedLast.rawValue)!; ctx.setFillColor(NSColor.white.cgColor); ctx.fill(CGRect(origin: .zero, size: canvasSize)); if let asterisk = NSImage(systemSymbolName: "asterisk", accessibilityDescription: nil)?.withSymbolConfiguration(config) { let tintedAsterisk = asterisk.withTintColor(.systemIndigo); let rect = CGRect(x: (canvasSize.width - symbolSize) / 2, y: (canvasSize.height - symbolSize) / 2, width: symbolSize, height: symbolSize); ctx.translateBy(x: canvasSize.width/2, y: canvasSize.height/2); ctx.rotate(by: .pi/4); ctx.translateBy(x: -canvasSize.width/2, y: -canvasSize.height/2); if let cgImage = tintedAsterisk.cgImage(forProposedRect: nil, context: nil, hints: nil) { ctx.draw(cgImage, in: rect); } }; if let cgImage = ctx.makeImage() { let finalImage = NSImage(cgImage: cgImage, size: canvasSize); if let tiffData = finalImage.tiffRepresentation, let bitmapImage = NSBitmapImageRep(data: tiffData), let pngData = bitmapImage.representation(using: .png, properties: [:]) { try? pngData.write(to: URL(fileURLWithPath: "app_icon.png")); print("âœ… Icon saved as app_icon.png"); } }
